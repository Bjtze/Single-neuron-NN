import torch
import torch.nn as nn

model = nn.Sequential(
    nn.Linear(2, 1),
    nn.Sigmoid()
)

x = torch.tensor([[1, 0], [0, 1], [0, 0], [1, 1]], dtype=torch.float32)

y = torch.tensor([[1], [1], [0], [1]], dtype=torch.float32)

criterion = nn.MSELoss()
optimizer = torch.optim.SGD(model.parameters(), lr=0.1)

for e in range(1000):
    optimizer.zero_grad() # Resets the gradients
    y_pred = model(x)
    loss = criterion(y_pred, y)
    loss.backward() # Gradients
    optimizer.step() # Updates the weights

print(model(x))
